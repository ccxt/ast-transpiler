#ifndef GENERATED_HEADER_H
#define GENERATED_HEADER_H

std::any getValue(const std::any& value2, const std::any& key);
bool inOp(const std::any& obj, const std::any& key);
bool isInteger(const std::any& a);
bool isNumber(const std::any& a);
bool isEqual(const std::any& a, const std::any& b);
int getIndexOf(const std::any& collection, const std::any& target);
int getArrayLength(const std::any& value);
std::any normalizeIntIfNeeded(const std::any& value);
std::any add(const std::any& a, const std::any& b);
std::any subtract(const std::any& a, const std::any& b);
std::any multiply(const std::any& a, const std::any& b);
std::any divide(const std::any& a, const std::any& b);
bool isGreaterThan(const std::any& a, const std::any& b);
bool isLessThan(const std::any& a, const std::any& b);
bool isGreaterThanOrEqual(const std::any& a, const std::any& b);
bool isLessThanOrEqual(const std::any& a, const std::any& b);
std::any mathMax(const std::any& a, const std::any& b);
std::any mathMin(const std::any& a, const std::any& b);
int getArrayLength(const std::any& value);
std::any postFixIncrement(std::any& a);
std::any postFixDecrement(std::any& a);
std::any mod(const std::any& a, const std::any& b);
std::any parseInt(const std::any& a);
std::any parseFloat(const std::any& a);
bool isTrue(const std::any& value);
std::any parseJson(const std::any& jsonInput);
std::any plusEqual(std::any a, std::any value);
std::any prefixUnaryNeg(std::any& a);
std::any prefixUnaryPlus(std::any& a);
std::string toString(const std::any& value);
std::string toUpper(const std::string& str);
std::string toLower(const std::string& str);
bool StartsWith(const std::string& str, const std::string& prefix);
bool startsWith(std::any str_any, std::any prefix_any);
bool EndsWith(const std::string& str, const std::string& suffix);
bool endsWith(std::any str_any, std::any suffix_any);
std::string trim(const std::string& str);
std::string trim(const std::any& value);
std::any shift(std::any& container_any);
std::any pop(std::any& container_any);
std::any reverse(std::any& container_any);
std::any join(const std::any& elements_any, const std::any& separator_any);
std::any split(const std::any& str_any, const std::any& delimiter_any);
std::any replace(const std::any& str_any, const std::any& target_any, const std::any& replacement_any);
bool isArray(const std::any& obj);
double mathFloor(const std::any& value);
double mathRound(const std::any& value);
double mathCeil(const std::any& value);
void arrayPush(std::any& arr, const std::any& value);
bool includes(const std::any& container, const std::any& value);
void setValue(std::any& target, const std::any& prop, const std::any& value);
void insertAt(std::any& vec, size_t index, const std::any& value, const std::any& default_value = std::any());
std::string getCurrentDate();
#endif // GENERATED_HEADER_H
